# 객체지향 프로그래밍(Object Oriented Programming)
# 프로그래밍 패러다임 중에 하나
# 패러다임 : 동시대 지식인들이 공유하고 있는 하나의 관념적 개념, 틀
# 태양계 행성 : 수금지화목토천해
# 절차지향 프로그래밍 (Procedual Programming)
# 절차(위에서 아래로, 왼쪽에서 오른쪽에서)

# 클래스 (설계도) : 객체 
# 객체 : 추상적 관념, 개념 + 수학적 지식

# 하나의 클래스(설계도) -> 여러 개의 인스턴스
# OOP 특징
# 추상화, 상속, 캡슐화, 다형성
# 추상화 : Abstraction
# 상속 : Inheritance
# 캡슐화 : Encapsulation
# 다형성 : Polymorphism

# 취업
# Order 
# 동물원 게임 프로그램
# 동물??
# 유니콘(SSR)
# 오리너구리
# 햄스터 : 포유류, 다리 4개, 초식, 소형, DNA 30쌍
# 고양이 : 포유류, 다리 4개, 잡식, 소형
# 기린 : 포유류
# 팬더 : 포유류 
# 침팬지
# 원숭이
# 뱀
# 딱정벌레
#

# 추상화
# 객체의 공통적인 특징을 추출해내는 것 : 추상화
# 자세한 특징 나열 X

# 코가 길고, 귀가 크고, 초대형 포유류 동물 : 코끼리

# 상속
# superclass, 부모클래스 설정
# 포유류 클래스 ->
# subclass, 자식클래스 해당 속성, 기능 상속 후 재활용

# 동물원 게임 프로그램
# 동물을 많이 수집하면 -> 수집 Level
# Level 개발만 접근할 수 있어야 한다
# 사용자는 접근 X
# 사용자들에게 공개 범위 설정 -> 캡슐화

# Java
# -> Method Overloading (중복정의)
# : 한 클래스내에서 메소드 이름을 동일하게 사용
# -> Method Overriding (재정의)
# : 자식클래스에서 메소드 재정의

# Python
# -> Function Overriding

# 다형성 : 한 기능으로 여러개 동작
# 만능리모컨 -> 볼륨 업 -> 티비 볼륨 +
#           -> 볼륨 업 -> 빔 화면이 올라간다

# 클래스 (Class) 고양이 설계도!!
# 객체(Object) "고양이"라는 개념
# 인스턴스(Instance) 실제하는 객체 : 미미

# 클래스 내 멤버 존재
# 멤버변수, 멤버기능
# 멤버 변수 : 속성, 특징, 필드
# 멤버 기능 : 메소드, 함수, 기능, 동작


# 고양이 생성
# OOP.py와 동일한 경로에 있는 Cat.py를 불러오자
# import Animal # Python File
from Animal import Cat

미미 = Cat()
미미.꾹꾹이()
print(미미.울음소리)
미미.젖을먹인다()

미미.외모 = '안 귀엽다'
print(미미.외모)

from Contact import Contact
연락처1 = Contact('배정수', 30, '10101')
연락처1.나이 = 40
연락처1.__이름 = '홍길동'
연락처1.출력()